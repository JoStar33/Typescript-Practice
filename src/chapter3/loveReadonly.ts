//함수가 매개변수를 수정하지 않는다면, 그리고 객체내에 키값을 수정하지 않는다면 readonly를 사용해줄 필요가 있다.
//readonly는 인터페이스와 매개변수를 명확하게 해주는 효과가 있다. 따라서 추후 사이드 이펙트를 방지할때 유용하다.
//주의할 점은 유틸리티 타입인 Readonly<T>는 얕게 동작한다. 깊은 Readonly처리를 위해선 DeepReadonly를 써야하고 라이브러리를
//설치해야한다는 점. 알아두자.

//현재 Readonly를 적용해야할 부분이 정말 많다고 느끼게 됐다. 대표적으로 우리 회사 프로젝트내에서도 서버로부터 가져온 객체값은
//따로 수정할일이 거의없다. 따라서 대부분의 객체들은 Readonly처리를 해도 지장이 없지않은가? 라는 생각을 하게됐다.